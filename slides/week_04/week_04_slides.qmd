---
title: "Data Cleaning and Processing in R"
date: "June 25, 2024"
css:
  - |
    .smaller h1 {
      font-size: 0.5em; /* Adjust the font size as needed */
    }
output:
  quarto::quarto_presentation:
    format: revealjs
    theme: 
      logo: images/primary_full-color.png
      theme: theme/slides.scss # Choose a theme for your presentation (e.g., simple, serif, solarized, etc.)
    incremental: true # Whether to display content incrementally (one step at a time)
    self_contained: true # Whether to create a standalone HTML file
    highlight_style: "github" # Syntax highlighting style (e.g., github, monokai, etc.)
    revealjs:
      controls: true # Display navigation controls (e.g., arrows, slide number, etc.)
      progress: true # Display a progress bar
      slideNumber: true # Display slide numbers
      center: true # Center the content on each slide
      chalkboard: true # Enable chalkboard mode for reveal.js
---

```{r}
#| output: false

library(tidyverse)
library(countdown)
library(tigris)
library(sf)
library(scales)
library(edbuildr)
library(viridis)
library(readxl)




bw_primary <- c("#6D1E4A", # 1 plum
                "#007786", # 2 teal
                "#0D525A", # 3 dark green
                "#212B46", # 4 navy
                "#5A6675", # 5 grey
                "#F0DEC1") # 6 cream

bw_secondary <- c("#FFC762", # 1 yellow
                  "#FFB653", # 2 orange
                  "#BEC6CE", # 3 light grey
                  "#2E1A4A", # 4 deep purple
                  "#7EA2D1", # 5 soft blue
                  "#CAD3FB", # 6 lavender
                  "#9CD4EA", # 7 sky
                  "#FFA497") # 8 peach


```

## Agenda

-   Principles of tidy data
-   Techniques to clean messy data
-   Break
-   Joining data sets
-   Review: Summarizing data
-   Homework and next class

# Review: The dplyr() package provides many functions to manipulate your data frames' columns and rows

These were the functions we learned in week 2, and are the functions you'll most frequently use from the dplyr packages are:

-   `select()`: names columns to keep from a data frame
-   `rename()`: name columns to keep from a data frame
-   `filter()`: remove rows that do not meet the condition in the logical statement from the output
-   `mutate()`: create a new column that will be added to the end of your data frame.

# Principles of tidy data

## Cleaning your data: One of the most important and under-appreciated stages of good data analysis

-   Most data rarely come to us in a format that is plug-and-play ready for analysis.

-   High-quality data analysis must start with gathering and cleaning relevant data.

-   This starts with ensuring that each data frame of raw data you read into R goes through a process of becoming "tidy" --- once you have tidy data, merging and visualizing data becomes much easier.

-   The process of tidying your data is also helpful for identifying anomalies or outliers in your raw data files.

> **"Tidy data sets are all alike, but every messy data set is messy in its own way."** - Hadley Wickham

## The principles of "tidy data" provide a helpful vision of what good, clean data should look like

Tidy data follows three rules:

1.  Each column is a variable
2.  Each row is an observation
3.  Each cell is a value

![Source: R for Data Science](https://d33wubrfki0l68.cloudfront.net/6f1ddb544fc5c69a2478e444ab8112fb0eea23f8/08547/images/r4ds/tidy-1.png){fig-align="center" width="3520"}

## Building tidy data sets will bring consistency to your data across scripts/projects {.smaller}

Tidy data sets also make it easier to work with functions in the `tidyverse`, which is built to work will with "tidy" data. The package we will focus on today is the `tidyr` package, which is designed to help you tidy up your messy data into a structured, organized format that is conducive to analysis and visualization. It offers a suite of functions for reshaping and transforming your data, making it easier to work with in downstream analyses.

![](https://bookdown.org/michela_cameletti/rcodingfordatascience/images/4_tidyverse-packages.png){fig-align="center"}

## It takes some work to make data tidy, including the use of functions to reshape your data {.smaller}

Data sets can violate the principles of tidy data in several ways. The most common way is for a variable to be embedded across columns. For example, multiple columns can represent data from different years. In this case, a variable (year) is actually represented by column names instead of being captured in its own "year" column.

**Solution:** If your data includes a variable that is embedded across several column names, use the **pivot_longer()** function

![Source: R for Data Science](https://epirhandbook.com/en/images/pivoting/pivot_longer_new.png) \## Data Importing Guidelines

## Data Importing {.smaller}

-   Load all packages at the top of the script
-   To load in a file to go the `data` folder, click on the file, and then click "Import Dataset"
-   The R code is in the left hand corner to load the data

![](images/Screenshot%202024-06-24%20at%202.02.13%20PM.png){fig-align="center"}

## Live coding example: Using `pivot_longer()` function

Key arguments of the `pivot_longer()` function:

-   `cols`: The names of the columns to pivot using tidy-select
-   `names_to`: The name for the new character column
-   `values_to`: The name for the new values column

```{r echo=TRUE, eval=FALSE}


# clean the special education data -----

section_611_longer <- section_611_raw |>
  # Makes all the letters in a column lowercase
  rename_with(tolower) |>
  select(state, fy2016, fy2017, fy2018, fy2019, fy2020, fy2021, fy2022) |>
  pivot_longer(cols = starts_with("fy"), # The columns start with "fy"
               names_to = "fiscal_year", # the names of the columns will become a value in the "fiscal_year" column
               values_to = "idea_funding") |> # The values in the "fy" columns will be in the new column "idea_funding"
  # Use the gsub to remove the "fy" from the fiscal years so that the values are just the year
  mutate(fiscal_year = as.numeric(gsub("^fy", "", fiscal_year))) |>
  mutate(idea_category = "Part B, Grants to States")


```

## It takes a bit of work to make data tidy, including the use of functions to reshape your data, cont. {.smaller}

A single observation may be spread across multiple rows: This can happen when one column includes multiple variable types within it. And example would be if a dataframe had a "data_type" column that included entries like "n_tested" and "pct_prof".

**Solution:** If your data includes data from a single observation spread across multiple rows, use the **pivot_wider()** function

![Source: R for Data Science](https://bcheggeseth.github.io/112_fall_2022/images/pivot_wider.png)

## Live coding example: Using `pivot_wider()` function {.smaller}

Breaking down the code:

-   `names_from`: The column with values that include multiple variables; will be pivoted into column names.
-   `values_from`: The column with values will be used as cell values after pivoting.

```{r echo=TRUE, eval=FALSE}

# Use pivot_wider with the 2023 graduation rate data 

mn_graduation_fy23_wider <- mn_graduation_fy23_raw |>
  # Makes all the letters in a column lowercase
  rename_with(tolower) |>
  # rename the columns so there isn't a space in-between the words
  rename(district = "district name",
         dist_id = "district number",
         dist_type = "district type",
         group_category = "group category",
         student_group = "student group",
         ending_status = "ending status",
         four_yr_grad_pct = "four year percent") |>
  # Select the columns we want to include in our dataframe for the pivot_wider
  select(district, dist_id, dist_type, group_category, student_group, ending_status, four_yr_grad_pct) |>
  # filter so that we are only looking at students who graduated in four years
  filter(ending_status == "Graduate") |>
  # filter the student demographics because we only want to look at race/ethnicity data
  filter(group_category == "Race/Ethnicity") |>
  # Pivot_wider! 
  pivot_wider(names_from = "student_group", # The names of the columns are from the student group column values
              values_from = "four_yr_grad_pct") 


```

# Techniques to clean messy data

## Cleaning data can be challenging, but it's easier if you take a systematic approach to every raw data file {.smaller}

+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Step               | Goal                                                                                                                                                                   |
+====================+========================================================================================================================================================================+
| Data import        | Ensure your import function is set up to read the data properly                                                                                                        |
+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column names       | Reformat or manually create column names that are:                                                                                                                     |
|                    |                                                                                                                                                                        |
|                    | -   lowercase                                                                                                                                                          |
|                    |                                                                                                                                                                        |
|                    | -   use underscores instead of spaces                                                                                                                                  |
|                    |                                                                                                                                                                        |
|                    | -   do not begin with a number                                                                                                                                         |
|                    |                                                                                                                                                                        |
|                    | -   follow a consistent format                                                                                                                                         |
+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Mis-formatted data | Work with functions from base R like `as.numeric()` or from the `tidyverse` packages like `stringr` to clean the data that appear in a different format than you want. |
+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Missing data       | Identify where in your dataset there are missing variables and/or outliers - this may be more of an iterative process as your explore your data.                       |
+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

## In-class coding example: Minnesota graduation data {.smaller}

We can manipulate the district and school data using the following functions:

-   `tolower()`: Converts characters to lowercase. It's commonly used when dealing with character data, such as strings, to ensure uniformity in text processing and comparisons.
-   `str_to_title()`: Converts strings to title case. Title case means that the first letter of each word is capitalized, while all other letters are in lowercase.
-   `str_replace_all()`: Replaces all occurrences of a pattern within a string with a specified replacement.

```{r echo=TRUE, eval=FALSE}

mn_graduation_school_fy23_clean <- mn_graduation_school_fy23_raw |>
  
  # using "tolower" to make all the values in the column lowercase
  mutate(dst_nam = tolower(dst_nam),
         sch_nam = tolower(sch_nam)) |>
  
  # using "str_to_title" makes the first letter of each word capitalized
  mutate(dst_nam = str_to_title(dst_nam),
         sch_nam = str_to_title(sch_nam)) |>
  
  # using "str_replace_all" turns "Dist" and "Dist."into "District"
  mutate(dst_nam = str_replace_all(dst_nam, c("Dist\\b" = "District", "Dist\\." = "District", "District\\." = "District")))

```

# Break

Before you go on break, please clone the `rclass-hw-wk-4` GitHub repository

## Your data will rarely come in a single table, so you will need to use join functions to merge the data frames {.smaller}

To join two data frames, they need to share a common column with a unique identifier.

State departments of education typically assign a unique ID number to each school district. **Make sure this is available in your data sets.**

Joining data sets on a name (e.g. school or district) can create problems based on:

-   Capitalization (Mcgregor v. McGregor)
-   Abbreviation (St. Paul v. Saint Paul)
-   Mis-spelling (it happens!)

## Using `left_join()` to merge data sets will help preserve your data {.smaller}

-   Once you have dataframes that share a common ID column, start with your most reliable set of data (typically student count data like ADM or enrollment) and use `left_join()` to attach additional data to that table.
-   This approach will preserve your original data, keeping the number of rows (e.g. districts or schools) consistent as you use `left_join()` to add data by adding more columns.
-   When a record in the "left" dataframe does not have a match in the "right" dataframe, `left_join()` will impute a value of `NA` for all such instances.

![Source: R for Data Science](https://d33wubrfki0l68.cloudfront.net/3abea0b730526c3f053a3838953c35a0ccbe8980/7f29b/diagrams/join-inner.png){fig-align="center"}

## Coding example: How to use left_join()

-   **Example 1:** The common ID columns have the same variable names (dist_id)
-   **Example 2:** The common ID columns have different variable names. The il_test_data_fy23_clean dataframe's variable is dist_id, while the example_2_il_finance_testing_fy23 data frame's variable name is rcdts. The column names can be different, but the values within the cells must be the same so we can join them.

```{r echo=TRUE, eval=FALSE}

# Use left_join() function to join the the illinoi data -------

# EXAMPLE 1: Join them with the same "dist_id" name 

example_1_il_finance_testing_fy23 <- il_test_data_fy23_clean |>
  left_join(il_finance_fy23_same_id, by = "dist_id")


# EXAMPLE 2: Join them with different column names, but they're the same values
# dist_id comes from because it's in the il_test_data_fy23_clean dataframe 
example_2_il_finance_testing_fy23 <- il_test_data_fy23_clean |>
  left_join(il_finance_fy23_diff_id, by = c("dist_id" = "rcdts"))

```

# What do you do if you need to create the unique identifier?

## The identifiers are not always in the same format. We can use `paste()` and `paste0()` to combine two columns to create an identifier

in R, `paste()` and `paste0()` are both functions that are used to concatenate strings, but they differ in how they handle separators:

-   The `paste()` function concatenates strings and allows you to specify a separator between the strings using the `sep` argument. If you do not specify a separator, it defaults to a space (" ").
-   The `paste0()` function is a convenience function that concatenates strings without any separator. It is equivalent to using `paste(..., sep = "")`.

## Live coding example: Minnesota MCA and FRPL data

```{r echo=TRUE, eval=FALSE}

# Create the unique identifier -----

# Create a unique identifer with paste0
mn_mca_frpl_district_fy22_clean <- mn_mca_frpl_district_fy22 |>
  # This tells us that we want the number to have 4 values 
  mutate(dist_number = str_pad(dist_number, width = 4, pad = "0"),
         dist_id = paste0(dist_type, dist_number))

# Another way to do this is with paste

mn_mca_frpl_district_fy22_other <- mn_mca_frpl_district_fy22 |>
  # This tells us that we want the number to have 4 values 
  mutate(dist_number = str_pad(dist_number, width = 4, pad = "0"),
         dist_id = paste(dist_type, dist_number, sep = ""))

# Join the MCA and FRPL data -----

# mn_mca_frpl_data <- mn_mca_frpl_district_fy22_clean |>
#   left_join(mn_frpl_district_clean, by = "dist_id") 
# Once we have shown this example, we will comment this out otherwise we will get 
# en error 

# We have an error because they are incompatible types. The "dist_id" in the 
# "mn_frpl_district_clean" data frame is a number and the "dist_id" variable in the 
# "mn_mca_frpl_district_fy22_clean" is a "character. We can convert either of them, 
# but for this example we will convert the id to a number

mn_mca_frpl_join <- mn_mca_frpl_district_fy22_clean|>
  mutate(dist_id = as.numeric(dist_id, na.rm = T)) |>
  left_join(mn_frpl_district_clean, by = "dist_id") 

# We notice that there are two districts. To rectify this we will remove the 
# extra district from one of the data frames. I will choose to remove the district 
# column in mn_frpl_district_clean because it's uppercase 

mn_frpl_district_clean <- mn_frpl_district_clean |>
  # We can use the subtract the sign in front of a column so that it won't be included in the data frame 
  select(-district)

# When we join the data frames there will only be one district column 
mn_mca_frpl_join_no_extra_district <- mn_mca_frpl_district_fy22_clean|>
  mutate(dist_id = as.numeric(dist_id, na.rm = T)) |> # This mean that anything with an NA is read as 0 
  left_join(mn_frpl_district_clean, by = "dist_id") |>
  # This removes the two columns we no longer want
  select(-dist_type, -dist_number) 

# Clean up the joined data frame ----

# We notice that there are no charter schools in the FRPL data, so we will drop that 
mn_mca_frpl_district <- mn_mca_frpl_join_no_extra_district |>
  filter(total_enroll > 0) |>
  # we also notice that the counts fo the MCA tests are characters, and not numbers
  # so we will convert them into numbers 
  mutate(does_not_meet_count = as.numeric(does_not_meet_count, na.rm = T),
         partially_meets_count = as.numeric(partially_meets_count, na.rm = T),
         meets_count = as.numeric(meets_count, na.rm = T),
         exceeds_count = as.numeric(exceeds_count, na.rm = T)) |>
  select(dist_id, district, total_enroll, everything())


```

# Review: Summarizing Data

## We can use the `group_by()` function to summarize data {.smaller}

::: columns
::: {.column width="45%"}
The `group_by()` function is part of the `dplyr` package. The primary purpose of `group_by()` is to group a data frame by one or more variables, which allows you to perform operations on subsets of the data independently.

-   Used to define groups of rows based on the values of one or more columns
-   It is usually followed by summarizing functions like `summarize()`, `mutate()`, or other dplyr functions to perform calculations within each group.
-   It simplifies data analysis tasks by allowing you to focus on grouped subsets of the data.
:::

::: {.column width="45%"}
![](https://swcarpentry.github.io/r-novice-gapminder/fig/13-dplyr-fig3.png)
:::
:::

## Common functions for summarizing data {.smaller}

After the `group_by()` function is used, then there are several different functions we can use with the `summarise()` function to summarize the data. A few are listed below:

-   The `sum()` function calculates the sum of the values in each group.\
-   The `first()` function returns the first value in each group.
-   The `last()` function returns the last value in each group.
-   The `median()` function calculates the median of values in each group.
-   The `min()` and `max()` functions minds the minimum and maximum value in each group.
-   The `n()` function counts the number of observations in each group.
-   The `n_distinct()` function counts the number of distinct values in each group.

## Live Coding Example: Minnesota FRPL Data

```{r echo=TRUE, eval=FALSE}

# Summarize the school data to create a district summary -----

mca_frpl_district_summary <- mca_frpl_school_fy22_clean |>
  # We are going to group the data by the dist_id, which is the unique 
  # district identifier we created 
  group_by(dist_id) |>
  # The "first" indicates to keep the first value. So this will keep the 
  # identification for district and dist_id
  summarise(dist_id = first(dist_id), 
            district = first(district),
            # The "sum" totals the values of the columns we are specifying
            total_tested = sum(total_tested, na.rm = T),
            does_not_meet_count = sum(does_not_meet_count, na.rm =T),
            partially_meets_count = sum(partially_meets_count, na.rm = T),
            meets_count = sum(meets_count, na.rm = T),
            exceeds_count = sum(exceeds_count, na.rm = T))

# We can also make a state summary -----

mca_frpl_state_summary <- mca_frpl_district_summary |>
  # We do not need to use group_by() because we are only going to have one value
  summarise(total_tested = sum(total_tested, na.rm = T),
            does_not_meet_count = sum(does_not_meet_count, na.rm =T),
            partially_meets_count = sum(partially_meets_count, na.rm = T),
            meets_count = sum(meets_count, na.rm = T),
            exceeds_count = sum(exceeds_count, na.rm = T)) |>
  mutate(state = "Minnesota") |>
  select(state, everything())

```

# Homework Assignment

## This week's assignment {.smaller}

**Reading assignment**

-   [***How Can School Finance Systems Support Students with Additional Learning Needs?***](https://bellwether.org/wp-content/uploads/2021/10/Bellwether_SplittingBill_05-HowCanSchoolFinStudentswLearnNeeds_Final.pdf)

-   [***How Do School Finance Systems Support English Learners?***](https://bellwether.org/wp-content/uploads/2024/03/SplittingtheBill_13_Bellwether_March2024.pdf)

**Data task**

Come to the July 9 class with your state's education finance and related student demographic data. We will go over how to create a GitHub repository so you can start cleaning your state's data!

**Coding task**

In the `rclass-hw-wk-4` GitHub repository, there are four scripts in the /scripts folder. Complete the scripts in the following order:

-   hw_04_pivot_wider_part1.R: Manipulate the data using the `pivot_wider` function. I have already provided the code to load the raw data frames, and named the cleaned data frames.
-   hw_04_pivot_longer_part2.R: Manipulate the data using the `pivot_longer` function. I have already provided the code to load the raw data frames, and named the cleaned data frames.
-   hw_04_join_data_part3.R: You will clean, join, and export two data frames. I have already provided the code to load the raw data frames, and named the cleaned data frames.
-   hw_04_summarize_data_part4.R: I have already created a cleaned data frame. You have to create a district and state summary for total student enrollment and for all grades, and then export the data frames.

**Homework is due by noon CT on Monday, July 8**

## Capstone Overview

Course participants will have several weeks to complete their capstone project. The capstone project will analyze a current funding formula issue in the participants' state, and will include the following:

-   An overview of the policy problem
-   Description of the 2-3 policy changes they are modeling
-   How they know if the policy options would be an improvement over current policy
-   Data they used to do their analysis

The participants can do their capstone in a Quarto document, PowerPoint deck, or a Word document. With that said, the capstone must include at least 5 data visualizations the participant did in R. The teaching team will host office hours to provide targeted support to course participants as they work on their capstone projects.

# Example: Krista's Capstone 

I modeled the impact that five policy changes would have on Minnesota's compensatory revenue formula, which is the state's formula for economically disadvantaged students. The images below demonstrate the impact of lifting the 80% funding cap on districts with more than 80% low-income students.

![](images/Screenshot 2024-06-24 at 2.50.09 PM.png){fig-align="center"}
