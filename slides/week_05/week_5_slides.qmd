---
title: "Tidycensus and Reproducible Data in R"
date: "July 9, 2024"
css:
  - |
    .smaller h1 {
      font-size: 0.5em; /* Adjust the font size as needed */
    }
output:
  quarto::quarto_presentation:
    format: revealjs
    theme: 
      logo: images/primary_full-color.png
      theme: theme/slides.scss # Choose a theme for your presentation (e.g., simple, serif, solarized, etc.)
    incremental: true # Whether to display content incrementally (one step at a time)
    self_contained: true # Whether to create a standalone HTML file
    highlight_style: "github" # Syntax highlighting style (e.g., github, monokai, etc.)
    revealjs:
      controls: true # Display navigation controls (e.g., arrows, slide number, etc.)
      progress: true # Display a progress bar
      slideNumber: true # Display slide numbers
      center: true # Center the content on each slide
      chalkboard: true # Enable chalkboard mode for reveal.js
---

```{r}
#| output: false

library(tidyverse)
library(countdown)
library(tigris)
library(sf)
library(scales)
library(edbuildr)
library(viridis)
library(readxl)




bw_primary <- c("#6D1E4A", # 1 plum
                "#007786", # 2 teal
                "#0D525A", # 3 dark green
                "#212B46", # 4 navy
                "#5A6675", # 5 grey
                "#F0DEC1") # 6 cream

bw_secondary <- c("#FFC762", # 1 yellow
                  "#FFB653", # 2 orange
                  "#BEC6CE", # 3 light grey
                  "#2E1A4A", # 4 deep purple
                  "#7EA2D1", # 5 soft blue
                  "#CAD3FB", # 6 lavender
                  "#9CD4EA", # 7 sky
                  "#FFA497") # 8 peach


```

## Agenda

-   Homework review
-   Tidycensus
-   Partner activity
-   Break
-   Reproducible data in R
-   Homework and next class

# Homework Review

# Tidycensus

## The tidycensus R package is a powerful tool designed to simplify the process of accessing and working with US Census data {.smaller}

::: columns
::: {.column width="60%"}
The Census Bureau collects a lot of information that is reported at the school district level. This includes information on topics that are relevant to school finance, like housing and health. The two main `tidycensus()` functions we will use are:

-   `get_acs()`: Accesses data from 1-year and 5-year American Community Survey samples
-   `get_estimates()`: Interfaces with Population Estimates APIs
:::

::: {.column width="40%" height="45%" fig-align="center"}
![](https://walker-data.com/tidycensus/logo.png){fig-height="50%" fig-align="center"}
:::
:::

## To get started, you will need to sign up for an API key with the Census Bureau

![](https://michaeldgarber.github.io/teach-r/images/census-api-key-landing.png){fig-align="center"}

[Signup for an API key here!](https://api.census.gov/data/key_signup.html)

# In-class `tidycensus()` exercise

## In the example we will use functions that are part of the `dplyr` package and `ggplot2` packages {.smaller}

-   `anti_join()`: Part of the `dplyr` package and filters observations from one data frame based on non-matches with another data frame.
-   `bind_rows()`: Part of the `dplyr` package and combines multiple data frames or tibbles by stacking them vertically.
-   `facet_wrap()`: Part of the `ggplot2` package and creates multi-panel plots by wrapping a 1D sequence of panels into a 2D layout.

We will also use several functions that we have already learned in the first four classes.

## In-class coding example: clean_and_join.R

```{r}
#| echo: true
#| eval: false

# load -----------

options(scipen = 999)

library(tidyverse)
library(edbuildr)
library(tidycensus)
library(viridis)
library(scales)

# get your own api key from https://api.census.gov/data/key_signup.html
# only run this line of code once after you replace the text below
# with your API key
census_api_key("YOUR API KEY GOES HERE", install = TRUE, overwrite = TRUE)

# get edbuild data
edbuild_fy19 <- masterpull(data_type = "geo")

# load census variables from 2019 acs 5-year estimates
v19 <- load_variables(2019, "acs5", cache = TRUE)

# get mortgage data for unified school districts
mortgage_unified_raw <- get_acs(variables = c("B25101_001", # total households
                                              "B25101_002", # total with a mortgage
                                              "B25101_024"), # total not mortgaged
                        geography = "school district (unified)",
                        state = "MN", 
                        year = 2019)

# get mortgage data for elementary school districts
mortgage_elementary_raw <- get_acs(variables = c("B25101_001", # total households
                                                  "B25101_002", # total with a mortgage
                                                  "B25101_024"), # total not mortgaged
                                    geography = "school district (elementary)",
                                    state = "MN", 
                                    year = 2019)

# get mortgage data for secondary school districts
mortgage_secondary_raw <- get_acs(variables = c("B25101_001", # total households
                                                  "B25101_002", # total with a mortgage
                                                  "B25101_024"), # total not mortgaged
                                    geography = "school district (secondary)",
                                    state = "MN", 
                                    year = 2019)


# clean ------------

# clean mortgage data for unified school districts
mortgage_pct_unified <- mortgage_unified_raw |> 
  # replace vars with more descriptive names
  mutate(variable = str_replace_all(variable, "B25101_001", "households"),
         variable = str_replace_all(variable, "B25101_002", "with_mortgage"),
         variable = str_replace_all(variable, "B25101_024", "no_mortgage")
        ) |>  # close mutate 
  # remove margin of error column
  select(-moe) |> 
  # pivot variable column into distinct columns
  pivot_wider(names_from = variable, values_from = estimate) |> 
  # calculate percent of households within a school district with a mortgage
  mutate(mortgage_pct = with_mortgage / households) 

# clean mortgage data for elementary school districts
mortgage_pct_elementary <- mortgage_elementary_raw |> 
  mutate(variable = str_replace_all(variable, "B25101_001", "households"),
         variable = str_replace_all(variable, "B25101_002", "with_mortgage"),
         variable = str_replace_all(variable, "B25101_024", "no_mortgage")
  ) |>  # close mutate 
  select(-moe) |> 
  pivot_wider(names_from = variable, values_from = estimate) |> 
  mutate(mortgage_pct = with_mortgage / households)

# clean mortgage data for secondary school districts
mortgage_pct_secondary <- mortgage_secondary_raw |> 
  mutate(variable = str_replace_all(variable, "B25101_001", "households"),
         variable = str_replace_all(variable, "B25101_002", "with_mortgage"),
         variable = str_replace_all(variable, "B25101_024", "no_mortgage")
  ) |>  # close mutate 
  select(-moe) |> 
  pivot_wider(names_from = variable, values_from = estimate) |> 
  mutate(mortgage_pct = with_mortgage / households)

# NOTE: this data isn't really that useful for mn!

# join ----------

# join unified and elementary data by binding rows
mortgage_pct_mn <- mortgage_pct_unified |> 
  bind_rows(mortgage_pct_elementary) |> 
  # filter out summary row
  filter(GEOID != "2199999") |> 
  # arrange from largest to smallest district
  arrange(-households)

# join edbuild and census data using left_join
edbuild_mortgage_mn <- edbuild_fy19 |> 
  filter(State == "Minnesota") |> 
  left_join(mortgage_pct_mn, by = c("NCESID" = "GEOID"))

# do the join again, but this time select for the columns we want to keep
# to avoid duplicates like district.x and district.y
edbuild_mortgage_mn <- edbuild_fy19 |> 
  filter(State == "Minnesota") |> 
  left_join(mortgage_pct_mn |> 
              select(GEOID, households, with_mortgage, mortgage_pct),
            by = c("NCESID" = "GEOID"))

# use anti_join() to check for districts with no mortgage data
edbuild_mortgage_mn_no_match <- edbuild_fy19 |> 
  filter(State == "Minnesota") |> 
  anti_join(mortgage_pct_mn |> 
              select(GEOID,households, with_mortgage, mortgage_pct),
            by = c("NCESID" = "GEOID"))

# run the reverse anti_join to see if the census data has 
#  districts not included in the edbuild table
mortgage_edbuild_mn_no_match <- mortgage_pct_mn |> 
  select(GEOID,households, with_mortgage, mortgage_pct) |> 
  anti_join(edbuild_fy19 |> 
              filter(State == "Minnesota") ,
            by = c("GEOID" = "NCESID"))

# plot -----------

# first plot of the joined dataset
ggplot(edbuild_mortgage_mn) +
  geom_point(aes(x = MHI, y = mortgage_pct, 
                 color = StPovRate, size = ENROLL),
             alpha = .7) +
  scale_size_area(max_size = 10, labels = label_comma()) +
  scale_x_continuous(labels = label_dollar()) +
  scale_y_continuous(labels = label_percent()) +
  scale_color_viridis(labels = label_percent()) +
  labs(x = "MHI", y = "Percent of households with a mortgage",
       color = "Poverty rate", size = "Enrollment") +
  theme_bw()

# facet by sdType
ggplot(edbuild_mortgage_mn) +
  geom_point(aes(x = MHI, y = mortgage_pct, 
                 color = StPovRate, size = ENROLL),
             alpha = .7) +
  scale_size_area(max_size = 10, labels = label_comma()) +
  scale_x_continuous(labels = label_dollar()) +
  scale_y_continuous(labels = label_percent()) +
  scale_color_viridis(labels = label_percent()) +
  labs(x = "MHI", y = "Percent of households with a mortgage",
       color = "Poverty rate", size = "Enrollment") +
  facet_wrap(~sdType) +
  theme_bw()

# filter out secondary districts and create better labels for 
# elementary and unified districts
ggplot(edbuild_mortgage_mn |> 
         filter(sdType != "secon") |> 
         mutate(sdType = case_when(sdType == "elem" ~ "Elementary",
                                   sdType == "uni" ~ "Unified"))) +
  geom_point(aes(x = MHI, y = mortgage_pct, 
                 color = StPovRate, size = ENROLL),
             alpha = .7) +
  scale_size_area(max_size = 10, labels = label_comma()) +
  scale_x_continuous(labels = label_dollar()) +
  scale_y_continuous(labels = label_percent()) +
  scale_color_viridis(labels = label_percent()) +
  labs(x = "MHI", y = "Percent of households with a mortgage",
       color = "Poverty rate", size = "Enrollment") +
  facet_wrap(~sdType) +
  theme_bw()

# same chart, but filter  allow for free x+y axis scales
ggplot(edbuild_mortgage_mn |> 
         filter(sdType != "secon") |> 
         mutate(sdType = case_when(sdType == "elem" ~ "Elementary",
                                   sdType == "uni" ~ "Unified"))) +
  geom_point(aes(x = MHI, y = mortgage_pct, 
                 color = StPovRate, size = ENROLL),
             alpha = .7) +
  scale_size_area(max_size = 10, labels = label_comma()) +
  scale_x_continuous(labels = label_dollar()) +
  scale_y_continuous(labels = label_percent()) +
  scale_color_viridis(labels = label_percent()) +
  labs(x = "MHI", y = "Percent of households with a mortgage",
       color = "Poverty rate", size = "Enrollment") +
  facet_wrap(~sdType, scales = "free") +
  theme_bw()



```

# Small Group Activitiy

## In small groups you will....

Do the in-class exercise but for your state. As you are looking through the data frames and the charts, ask yourselves: 

- What do you notice about the data? 
- Anything surprising or seem off? 

# Break

# Setting up your data processing project

## You can (and should) start your projects by creating a new repo on your GitHub account

![](week_5_images/git_new.png){fig-align="center"}

## Before you start coding, set yourself up for a successful, reproducible analysis project

-   Every new data analysis project should live in its own RStudio project
-   Most of your projects should be started on Github, then cloned locally (just like we do with homework)
    -   **Be sure to set your project repos to "Private" before creating them on Github!**
    -   Also, using a `README.md` file can help you stay organized and keep track of data sources and/or outliers.
-   RStudio projects can be also created locally by navigating to `File -> New Project...`, but it's more difficult to connect it to Github if you start that way.

## Remember: After you've created a project, use a consistent folder structure to keep your analysis organized

::: columns
::: {.column width="40%"}
-   Building a consistent file structure in your projects will help you (and others!) easily navigate your code.

-   Minimally, you will want to have a separate folder for:

    -   `data`

    -   `scripts`

    -   `figures`
:::

::: {.column width="60%"}
![](week_5_images/Screenshot 2024-07-03 at 2.24.37 PM.png){fig-align="center" width="400"}
:::
:::

## Another layer of organization: Separate your raw and processed data!

::: columns
::: {.column width="50%"}
-   Use sub-folders within your `/data` folder to keep your raw data files separated from any processed data files you produce during your analysis.
-   This creates additional procedural barrier to accidentally over-writing your raw data.
-   Use the `/processed` data folder for exporting clean data or results of your analysis, like summary tables.
:::

::: {.column width="50%"}
![](week_5_images/Screenshot%202023-06-27%20at%204.50.22%20PM.png){fig-align="center" width="475"}
:::
:::

# Sourcing Scripts

## You can use the source function in R to reuse functions that you create in another R script.

-   The **source** function uses this basic syntax: `source("path/to/some/file.R")` to run scripts you've written behind-the-scenes, giving you access to the objects created by that script.
-   Breaking up your data cleaning and analysis work across multiple scripts can be very helpful during complex projects.
-   This approach makes it easier to isolate errors and update code.

```{r}
#| echo: true
#| eval: false

# load -----

library(tidyverse)
library(readxl)

options(scipen = 999)

# Calling in scripts from the "updated_app_data" folder then the code in 
# scripts 1-13 will run! 
source("updated_app_data/13_updated_2020_app_data.R") 


```

## Live coding example: U.S. Census Annual Survey of School System Finances

```{r}
#| echo: true
#| eval: false

# 2_f33_2008_2013_clean
# 2022-10-05 last updated by Krista Kaput

# load -----

library(tidyverse)
library(readxl)

options(scipen = 999)

# source script cleaning f33 data from 2002-2007
source("f33_finance_enrollment_scripts/1_f33_2002_2007_clean.R")

# load raw f33 from 2008 
f33_2008_raw <- read_excel("raw_data/f33_finance_raw/elsec08_sttables.xls", 
              sheet = "1", skip = 9, n_max = 53)

# load raw f33 from 2009
f33_2009_raw <- read_excel("raw_data/f33_finance_raw/elsec09_sttables.xls", 
                           sheet = "1", skip = 9, n_max = 53)

# load raw f33 from 2010 
f33_2010_raw <- read_excel("raw_data/f33_finance_raw/elsec10_sttables.xls", 
                           sheet = "1", skip = 9, n_max = 53)

# load raw f33 from 2011
f33_2011_raw <- read_excel("raw_data/f33_finance_raw/elsec11_sttables.xls", 
                           sheet = "1", skip = 9, n_max = 53)

# load raw f33 from 2012 
f33_2012_raw <- read_excel("raw_data/f33_finance_raw/elsec12_sttables.xls", 
                          sheet = "1", skip = 7, n_max = 53)

# load raw f33 from 2013 
f33_2013_raw <- read_excel("raw_data/f33_finance_raw/elsec13_sttables.xls", 
                           sheet = "1", skip = 7, n_max = 53)


# clean all 2008 f33 data ---------
f33_2008_all <- f33_2008_raw |>
  rename(state = "...1",
         total_revenue = "Total Revenue",
         federal_revenue = "Federal Revenue",
         state_revenue = "State Revenue",
         local_revenue = "Local Revenue",
         total_expenditures = "Total Expenditure",
         current_expenditures = "Current Spending",
         capital_expenses = "Capital Outlay") |>
  mutate(year = 2008) |>
  select(year, state, total_revenue, federal_revenue, state_revenue, local_revenue,
         total_expenditures, current_expenditures, capital_expenses)

# filter for 2008 national f33 data
f33_2008_us <- f33_2008_all |>
  filter(total_revenue == "582125621")

# filter for 2008 state f33 data
f33_2008_states <- f33_2008_all |>
  filter(total_revenue != "582125621")


# clean all 2009 f33 data ---------
f33_2009_all <- f33_2009_raw |>
  rename(state = "...1",
         total_revenue = "Total Revenue",
         federal_revenue = "Federal Revenue",
         state_revenue = "State Revenue",
         local_revenue = "Local Revenue",
         total_expenditures = "Total Expenditure",
         current_expenditures = "Current Spending",
         capital_expenses = "Capital Outlay") |>
  mutate(year = 2009) |>
  select(year, state, total_revenue, federal_revenue, state_revenue, local_revenue,
         total_expenditures, current_expenditures, capital_expenses)

# filter for 2009 national f33 data
f33_2009_us <- f33_2009_all |>
  filter(total_revenue == "590947579")

# filter for 2009 state f33 data
f33_2009_states <- f33_2009_all |>
  filter(total_revenue != "590947579")

# clean all 2010 f33 data ------------
f33_2010_all <- f33_2010_raw |>
  rename(state = "...1",
         total_revenue = "Total Revenue",
         federal_revenue = "Federal Revenue",
         state_revenue = "State Revenue",
         local_revenue = "Local Revenue",
         total_expenditures = "Total Expenditure",
         current_expenditures = "Current Spending",
         capital_expenses = "Capital Outlay") |>
  mutate(year = 2010) |>
  select(year, state, total_revenue, federal_revenue, state_revenue, local_revenue,
         total_expenditures, current_expenditures, capital_expenses)

# filter for 2010 national f33 data
f33_2010_us <- f33_2010_all |>
  filter(total_revenue == "592895329")

# filter for 2010 state f33 data
f33_2010_states <- f33_2010_all |>
  filter(total_revenue != "592895329")

# clean all 2011 f33 data ------------
f33_2011_all <- f33_2011_raw |>
  rename(state = "...1",
         total_revenue = "Total Revenue",
         federal_revenue = "Federal Revenue",
         state_revenue = "State Revenue",
         local_revenue = "Local Revenue",
         total_expenditures = "Total Expenditures",
         current_expenditures = "Current Spending",
         capital_expenses = "Capital Outlay") |>
  mutate(year = 2011) |>
  select(year, state, total_revenue, federal_revenue, state_revenue, local_revenue,
         total_expenditures, current_expenditures, capital_expenses)

```

# What is R Markdown?

## R Markdown is a special file type that allows you to combine code with plain text to create reports {.smaller}

::: columns
::: {.column width="50%"}
1.  **YAML Header:** Controls certain output settings that apply to the entire document.

2.  **Code Chunk**: Includes code to run, and code-related options.

3.  **Body Text:** For communicating results and findings to the targeted audience.

4.  **Code to Generate a Table:** Outputs a table with minimal formatting like you would see in the console.

5.  **Section Header**: Specified with `##`.

6.  **Code to Generate a Plot**: Outputs a plot. Here, the code used to generate the plot will not be included because the parameter `echo=FALSE` is specified.
:::

::: {.column width="50%"}
![](week_5_images/Screenshot%202023-06-27%20at%205.19.26%20PM.png){fig-align="center" width="550"}
:::
:::

## R Markdown combines "chunks" of R code with blocks of Markdown-formatted text {.smaller}

::: columns
::: {.column width="50%"}
R code chunks in R Markdown are contained within a pair of triple backticks that include a curly brace that indicates the section contains r code:

\`\`\`{r}

\<code goes here\>

\`\`\`

-   Markdown is a \*really\* easy way to format text. For more, visit [Markdown Guide](https://www.markdownguide.org/cheat-sheet/)).

-   For more on using R Markdown documents, check out [RStudio's resources here](https://rmarkdown.rstudio.com/).
:::

::: {.column width="50%"}
![](week_5_images/Screenshot%202023-06-27%20at%205.25.44%20PM.png){fig-align="center"}
:::
:::

## LIVE CODING EXAMPLE: Kentucky EdBuild Data Analysis

![](week_5_images/Screenshot%202023-06-27%20at%205.31.13%20PM.png){fig-align="center"}

# What is Quarto?

## Quarto is a multi-language, next generation version of R Markdown from RStudio {.smaller}

-   Like R Markdown, Quarto is free and open source
-   Quarto also uses Knitr to execute R code, so it can render most existing Rmd files without modification
-   Use a single source document to target multiple formats (HTML, PDF, Word, etc.)
-   It's language-agnostic. It can render documents that contain code written in R, Python, Julia, or Observable.
-   Check out the gallery of [Quarto examples](https://quarto.org/docs/gallery/)

![](week_5_images/Screenshot%202023-06-27%20at%205.42.57%20PM.png){fig-align="center"}

## How to use Quarto: Rendering

-   Use the **Render** button to render the file and preview the output with a single click or keyboard shortcut (⇧⌘K)

-   You can also automatically render whenever you save. To do that you check the Render on Save option on the editor toolbar. The preview will update whenever you re-render the document. Side-by-side preview works for both HTML and PDF outputs.

-   When rendering, Quarto generates a new file that contains selected text, code, and results from the .qmd file. The new file can be an [HTML](https://quarto.org/docs/output-formats/all-formats.html), [PDF](https://quarto.org/docs/output-formats/pdf-basics.html), [MS Word](https://quarto.org/docs/output-formats/ms-word.html) document, [presentation](https://quarto.org/docs/presentations/), [website](https://quarto.org/docs/websites/), [book](https://quarto.org/docs/books/), [interactive document](https://quarto.org/docs/interactive/), or [other format](https://quarto.org/docs/output-formats/all-formats.html).

![](week_5_images/Screenshot%202023-06-27%20at%205.58.35%20PM.png){fig-align="center"}

## How to use Quarto: Authoring

![](week_5_images/Screenshot%202023-06-27%20at%206.02.08%20PM.png){fig-align="center"}

## LIVE CODING EXAMPLE: Kentucky EdBuild Data Analysis

![](week_5_images/Screenshot%202023-07-05%20at%204.34.56%20PM.png){fig-align="center" width="625"}

# Homework

## This week's homework assignment

**Reading assignment**

-   [***What Should the Future of School Finance Equity Look Like?***](https://bellwether.org/wp-content/uploads/2021/10/Bellwether_SplittingBill_09-FutureEquity_Final.pdf)

**Coding task**

-   Clone the `rclass-capstone-project` capstone GitHub repository. Upload your data using the file structure we discussed today and start cleaning and analyzing your state's education finance data! 
-   If you were not able to finish the week 4 homework, please finish it by noon on Monday, July 15. 
-   Sign up for 1:1 check-in with Alex and Krista so we can discuss your capstone projects. Link will be sent in follow-up email. 

