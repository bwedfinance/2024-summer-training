{
  "hash": "7abf9224d3aa8fd7ff8660e3e3f7e7bb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Advanced Data Visualization Techniques\"\ndate: \"August 13, 2024\"\nformat:\n  revealjs:\n    chalkboard: true\nexecute:\n  freeze: auto\n  echo: false\n---\n\n\n## Taking your data visualization skills to the next level\n\n-   Creating charts using the `ggplot` skills you've learned so far can cover 80% of your data visualization needs, but a few extra techniques can help fill in the gaps\n-   We've emphasized the importance of understanding your data well - especially outliers\n-   Two techniques can help you understand your data more deeply:\n    -   Labeled data presentation\n    -   Interactive data exploration\n\n## Labeled data presentation and iteractive exploration should be used iteratively\n\n-   If you have datapoints of interest, labeling those observations in plots can help provide an initial orientation to your data, but there may be\n-   When you start to interact with a new dataset, interactive data exploration can help reveal outliers more quickly than other forms of data analysis\n-   Once you've identified all points of interest (pre-known and revealed outliers), labled plots can help direct external audiences to critical insights\n\n# Labeled data presentation\n\n## Labels can help identify districts of interest in your exploratory data visualizations\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load --------\nlibrary(tidyverse)\nlibrary(edbuildr)\nlibrary(scales)\nlibrary(ggrepel)\n\ndist_raw <- masterpull(data_type = \"geo\", data_year = \"2019\")\n\n# clean ---------\n\n# filter to state of interest\nnj_dist <- dist_raw |> \n  rename_with(tolower) |> \n  filter(state == \"New Jersey\")\n\n\n# create df of known districts of interest\nnj_labels <- nj_dist |> \n  filter(ncesid %in% c(\"3411340\", # newark\n                       \"3410560\", # montclair\n                       \"3410200\", # millburn\n                       \"3401830\", # bloomfield\n                       \"3411880\"  # nutley\n                       ))\n```\n:::\n\n\n## `ggplot2` comes with a function for labeling, but it's of limited use\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nggplot() +\n  # create points using main data\n  geom_point(data = nj_dist,\n             aes(x = mpv,\n                 y = slrpp, \n                 size = enroll),\n             alpha = .5) +\n  # add text labels using geom_text()\n  geom_label(data = nj_labels,\n             aes(x = mpv, \n                 y = slrpp, \n                 label = name)) +\n  scale_size_area(max_size = 10, \n                  label = label_comma()) +\n  scale_x_continuous(labels = label_dollar()) +\n  scale_y_continuous(labels = label_dollar()) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](week_10_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n## We'll use `nj_dist` for plotting points and `nj_labels` for annotation\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"3,9\"}\nggplot() +\n  # create points using main data\n  geom_point(data = nj_dist,\n             aes(x = mpv,\n                 y = slrpp, \n                 size = enroll),\n             alpha = .5) +\n  # add text labels using geom_text()\n  geom_label(data = nj_labels,\n             aes(x = mpv, \n                 y = slrpp, \n                 label = name)) +\n  scale_size_area(max_size = 10, \n                  label = label_comma()) +\n  scale_x_continuous(labels = label_dollar()) +\n  scale_y_continuous(labels = label_dollar()) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](week_10_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n## The `ggrepel` package allows you to add more helpful, custom labels without much change in your code\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  # create points using main data\n  geom_point(data = nj_dist,\n             aes(x = mpv,\n                 y = slrpp, \n                 size = enroll),\n             alpha = .5) +\n  # add text labels using geom_label_repel()\n  geom_label_repel(data = nj_labels,\n                   aes(x = mpv, \n                   y = slrpp, \n                   label = name)) +\n  scale_size_area(max_size = 10, \n                  label = label_comma()) +\n  scale_x_continuous(labels = label_dollar()) +\n  scale_y_continuous(labels = label_dollar()) +\n  theme_bw()\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  # create points using main data\n  geom_point(data = nj_dist,\n             aes(x = mpv,\n                 y = slrpp, \n                 size = enroll),\n             alpha = .5) +\n  # add text labels using geom_label_repel()\n  geom_label_repel(data = nj_labels,\n                   aes(x = mpv, \n                   y = slrpp, \n                   label = name)) +\n  scale_size_area(max_size = 10, \n                  label = label_comma()) +\n  scale_x_continuous(labels = label_dollar()) +\n  scale_y_continuous(labels = label_dollar()) +\n  theme_bw()\n```\n:::\n\n:::\n:::\n\n## The `ggrepel` package allows you to add more helpful, custom labels without much change to your code\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"9\"}\nggplot() +\n  # create points using main data\n  geom_point(data = nj_dist,\n             aes(x = mpv,\n                 y = slrpp, \n                 size = enroll),\n             alpha = .5) +\n  # add text labels using geom_label_repel()\n  geom_label_repel(data = nj_labels,\n                   aes(x = mpv, \n                   y = slrpp, \n                   label = name)) +\n  scale_size_area(max_size = 10, \n                  label = label_comma()) +\n  scale_x_continuous(labels = label_dollar()) +\n  scale_y_continuous(labels = label_dollar()) +\n  theme_bw()\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"9\"}\nggplot() +\n  # create points using main data\n  geom_point(data = nj_dist,\n             aes(x = mpv,\n                 y = slrpp, \n                 size = enroll),\n             alpha = .5) +\n  # add text labels using geom_label_repel()\n  geom_label_repel(data = nj_labels,\n                   aes(x = mpv, \n                   y = slrpp, \n                   label = name)) +\n  scale_size_area(max_size = 10, \n                  label = label_comma()) +\n  scale_x_continuous(labels = label_dollar()) +\n  scale_y_continuous(labels = label_dollar()) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](week_10_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n:::\n:::\n\n## Adjusting a few options can make `ggrepel` plots easier to interpret\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"13-22\"}\nggplot() +\n  # create points using main data\n  geom_point(data = nj_dist,\n             aes(x = mpv,\n                 y = slrpp, \n                 size = enroll),\n             alpha = .5) +\n  # add text labels using geom_label()\n  geom_label_repel(data = nj_labels,\n                   aes(x = mpv, \n                       y = slrpp, \n                       label = name),\n                   min.segment.length = 0,\n                   box.padding = 1,\n                   segment.color = \"red\") +\n  # add another layer of points of interest\n  geom_point(data = nj_labels,\n             aes(x = mpv,\n                 y = slrpp, \n                 size = enroll),\n             color = \"red\",\n             alpha = .5) +\n  scale_size_area(max_size = 10, \n                  label = label_comma()) +\n  scale_x_continuous(labels = label_dollar()) +\n  scale_y_continuous(labels = label_dollar()) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](week_10_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n# Interactive data exploration\n\n## The `plotly` package allows you to convert a static plot to an interactive plot\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1:3,9, 17\"}\nlibrary(plotly)\n\nstatic_plot <-  ggplot() +\n  # create points using main data\n  geom_point(data = nj_dist,\n             aes(x = mpv,\n                 y = slrpp, \n                 size = enroll,\n                 text = name),\n             alpha = .5) +\n  scale_size_area(max_size = 10, \n                  label = label_comma()) +\n  scale_x_continuous(labels = label_dollar()) +\n  scale_y_continuous(labels = label_dollar()) +\n  theme_bw()\n\nggplotly(static_plot, label = \"text\")\n```\n:::\n\n\n## Example `plotly` visualization\n\n![](plotly_img.png){fig-align=\"center\"}\n\n## Reminders of office hours and capstone\n",
    "supporting": [
      "week_10_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}